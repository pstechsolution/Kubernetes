ReplicaSet
=====================================
A ReplicaSet's purpose is to maintain a stable set of replica Pods running at any given time.

As such, it is often used to guarantee the availability of a specified number of identical Pods.

A ReplicaSet is defined with fields, including

a selector that specifies how to identify Pods it can acquire,
a number of replicas indicating how many Pods it should be maintaining,
and a pod template specifying the data of new Pods it should create to meet the number of replicas criteria.
A ReplicaSet then fulfills its purpose by creating and deleting Pods as needed to reach the desired number. When a ReplicaSet needs to create new Pods, it uses its Pod template.

Daemonset
=====================================
A DaemonSet ensures that all (or some) Nodes run a copy of a Pod.

As nodes are added to the cluster, Pods are added to them. As nodes are removed from the cluster, those Pods are garbage collected.

Deleting a DaemonSet will clean up the Pods it created.

Some typical uses of a DaemonSet are:
running a cluster storage daemon on every node
running a logs collection daemon on every node
running a node monitoring daemon on every node

Deployments
=========================================
A Deployment provides declarative(rolling) updates for Pods and ReplicaSets.

You describe a desired state in a Deployment, and the Deployment Controller changes the actual state to the desired state at a controlled rate.

You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.

Use Case
The following are typical use cases for Deployments:

Create a Deployment to rollout a ReplicaSet. The ReplicaSet creates Pods in the background. Check the status of the rollout to see if it succeeds or not.

Declare the new state of the Pods by updating the PodTemplateSpec of the Deployment. A new ReplicaSet is created and the Deployment manages moving the Pods from the old ReplicaSet to the new one at a controlled rate. Each new ReplicaSet updates the revision of the Deployment.

Rollback to an earlier Deployment revision if the current state of the Deployment is not stable. Each rollback updates the revision of the Deployment.

Scale up the Deployment to facilitate more load.

Pause the rollout of a Deployment to apply multiple fixes to its PodTemplateSpec and then resume it to start a new rollout.

Use the status of the Deployment as an indicator that a rollout has stuck.

Clean up older ReplicaSets that you don't need anymore.

Jobs
================================================
Kubernetes Jobs ensure that one or more pods execute their commands and exit successfully.

When all the pods have exited without errors, the Job gets completed.

When the Job gets deleted, any created pods get deleted as well.

CronJobs
==================================
A CronJob creates Jobs on a repeating schedule.

One CronJob object is like one line of a crontab (cron table) file. It runs a job periodically on a given schedule, written in Cron format.

