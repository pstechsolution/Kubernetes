Persistent Volumes & Persisten Volume Claims
Managing storage is a distinct problem from managing compute instances. The PersistentVolume subsystem provides an API for users and administrators that abstracts details of how storage is provided from how it is consumed. To do this, kubernetes introduced two new API resources: PersistentVolume and PersistentVolumeClaim.

A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using Storage Classes.
It is a resource in the cluster just like a node is a cluster resource. PVs are volume plugins like Volumes, 
but have a lifecycle independent of any individual Pod that uses the PV. 
This API object captures the details of the implementation of the storage, be that NFS, iSCSI, or a cloud-provider-specific storage system.

A PersistentVolumeClaim (PVC) is a request for storage by a user. 
It is similar to a Pod. Pods consume node resources and PVCs consume PV resources. 
Pods can request specific levels of resources (CPU and Memory). 
Claims can request specific size and access modes (e.g., they can be mounted ReadWriteOnce, ReadOnlyMany or ReadWriteMany, see AccessModes).

While PersistentVolumeClaims allow a user to consume abstract storage resources, it is common that users need PersistentVolumes with varying properties,
such as performance, for different problems. Cluster administrators need to be able to offer a variety of PersistentVolumes that differ in more ways than size and access modes, without exposing users to the details of how those volumes are implemented. For these needs, there is the StorageClass resource.

ConfigMpas
=================================
Many applications rely on configuration which is used during either application initialization or runtime.

Most of the times there is a requirement to adjust values assigned to configuration parameters.

ConfigMaps is the kubernetes way to inject application pods with configuration data.

ConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable.

A ConfigMap is an API object used to store non-confidential data in key-value pairs in the cluster store (ETCD).
Pods can consume ConfigMaps as
environment variables,
command-line arguments,
or as configuration files in a volume.

Secrets:
=========================================

A Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key.

Such information might otherwise be put in a Pod specification or in a container image.

Using a Secret means that you don't need to include confidential data in your application code.

Because Secrets can be created independently of the Pods that use them, there is less risk of the Secret (and its data) being exposed during the workflow of creating, viewing, and editing Pods.

Kubernetes, and applications that run in your cluster, can also take additional precautions with Secrets, such as avoiding writing secret data to nonvolatile storage.

Distribute Credentials Securely Using Secrets
==========================

https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/


